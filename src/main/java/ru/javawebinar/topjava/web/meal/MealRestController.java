package ru.javawebinar.topjava.web.meal;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Controller;
import ru.javawebinar.topjava.service.MealService;

@Controller
public class MealRestController {
    private final Logger log = LoggerFactory.getLogger(MealRestController.class);

    private MealService service;



}

//TODO 4: Реализовать слои приложения для функциональности "еда".
// API контроллера должна удовлетворять все потребности демо приложения и ничего лишнего (см. демо).
// Поиск и изменение порядка сортировки в таблице демо приложения реализованы на UI (в браузере), в приложении делать не нужно.
// Смотрите на реализацию слоя для user и делаете по аналогии! Если там что-то непонятно, не надо исправлять или делать по своему.
// Задавайте вопросы. Если действительно нужна правка - я сделаю и напишу всем.
// 4.1: после авторизации (сделаем позднее), id авторизованного юзера можно получить из SecurityUtil.authUserId().
// Запрос попадает в контроллер, методы которого будут доступны снаружи по http,
// т.е. запрос можно будет сделать с ЛЮБЫМ id для еды (не принадлежащем авторизированному пользователю).
// Нельзя позволять модифицировать/смотреть чужую еду.
// 4.2: SecurityUtil может использоваться только на слое web (см. реализацию ProfileRestController).
// MealService можно тестировать без подмены логики авторизации, поэтому в методы сервиса и репозитория
// мы передаем параметр userId: id авторизованного пользователя (предполагаемого владельца еды).
// 4.3: если еда не принадлежит авторизированному пользователю или отсутствует, в MealService бросать NotFoundException.
// 4.4: конвертацию в MealTo можно делать как в слое web, так и в service (Mapping Entity->DTO: Controller or Service?)
// 4.5: в MealService постараться сделать в каждом методе только одни запрос к MealRepository
// 4.6 еще раз: не надо в названиях методов повторять названия класса (Meal).